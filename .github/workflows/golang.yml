name: Go CI

on:
  push:
    tags:
      - '*'
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'

jobs:
  lint-go:
    name: Lint Go

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download build-essential
        run: |
          sudo apt update -y
          sudo apt install -y build-essential

      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.21'
          cache: true
          cache-dependency-path: go.sum

      - name: Download all Go modules
        run: |
          go mod download

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout 5m

  test-go:
    name: Test Go

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download build-essential
        run: |
          sudo apt update -y
          sudo apt install -y build-essential

      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.21'
          cache: true
          cache-dependency-path: go.sum

      - name: Download all Go modules
        run: |
          go mod download

      - name: Run tests
        run: go test -race -covermode=atomic -timeout=30s ./...

  build-go-docker:
    name: Build Docker

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        uses: docker/build-push-action@v5
        if: ${{ ! startsWith(github.ref, 'refs/tags') }}
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ghcr.io/deepsquare-io/dpsproxy-server:latest
          build-args: |
            VERSION=dev
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to GHCR
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get the oci compatible version
        if: startsWith(github.ref, 'refs/tags/')
        id: get_version
        run: |
          OCI_VERSION=$(echo ${GITHUB_REF#refs/*/} | sed 's/+/-/g' | sed 's/v//g')
          echo "VERSION=${OCI_VERSION}" >> $GITHUB_OUTPUT

      - name: Build and export
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/deepsquare-io/dpsproxy-server:latest
            ghcr.io/deepsquare-io/dpsproxy-server:dev
            ghcr.io/deepsquare-io/dpsproxy-server:${{ steps.get_version.outputs.VERSION }}
          build-args: |
            ${{ steps.get_version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build:
    name: Build Go

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download build-essential
        run: |
          sudo apt update -y
          sudo apt install -y make build-essential

      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          check-latest: true
          cache-dependency-path: go.mod

      - name: Build
        run: |
          make build-all

      - name: Get the version
        if: startsWith(github.ref, 'refs/tags/')
        id: get_version
        run: |
          VERSION=$(echo ${GITHUB_REF#refs/*/})
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - uses: sersoft-gmbh/setup-gh-cli-action@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          version: stable

      - name: Create release and upload binaries
        if: startsWith(github.ref, 'refs/tags/')
        run: gh release create ${{ steps.get_version.outputs.VERSION }} -t ${{ steps.get_version.outputs.VERSION }} -F bin/checksums.md --prerelease=${{ contains(steps.get_version.outputs.VERSION, '-') }} bin/dpsproxy-* bin/checksums.txt
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
