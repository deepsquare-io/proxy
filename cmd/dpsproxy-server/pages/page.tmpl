{{define "head"}}
<title>Home - DeepSquare Proxy</title>
<script
  src="https://unpkg.com/clipboard@2.0.11"
  integrity="sha384-8VtMW+BflZ1BJajIFHIyWbIIFFwOtQSk9mnRGwGxKAK92i6vUtIz60tUIiA9QSo0"
  crossorigin="anonymous"
></script>
<script>
  window.onload = function () {
    const clipboard = new ClipboardJS('.clip');

    clipboard.on('success', function (e) {
      /** @type {HTMLElement} */
      const elem = e.trigger;

      const attr = elem.getAttribute('data-tooltip');
      elem.setAttribute('data-tooltip', 'Copied!');
      e.clearSelection();

      setTimeout(function () {
        elem.setAttribute('data-tooltip', attr);
      }, 1000);
    });
  };

  /**
   * @param {string} value - Hex value
   */
  function hexStringToBytes(value) {
    if (typeof value === 'string' && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {
      const result = new Uint8Array((value.length - 2) / 2);
      let offset = 2;
      for (let i = 0; i < result.length; i++) {
        result[i] = parseInt(value.substring(offset, offset + 2), 16);
        offset += 2;
      }
      return result;
    }
    throw new Error('not a hex string');
  }

  /**
   * @param {bool} retrieve - Retrieve route instead of generating it.
   * @returns {Promise<string>}
   */
  async function login(retrieve) {
    if (typeof window.ethereum === 'undefined') {
      alert('Metamask not detected');
    }
    try {
      // Fetch account
      const accounts = await window.ethereum.request({
        method: 'eth_requestAccounts',
      });
      const from = accounts[0];

      // Fetch challenge and sign
      let resp = await fetch('/challenge');
      const challenge = await resp.text();
      const sig = await window.ethereum.request({
        method: 'personal_sign',
        params: [challenge, from],
      });

      // Submit challenge and signature
      const textEncoder = new TextEncoder();
      const challengeBytes = textEncoder.encode(challenge);
      const payload = {
        address: from,
        data: Array.from(challengeBytes),
        sig: Array.from(hexStringToBytes(sig)),
      };
      resp = await fetch(`/routes?retrieve=${retrieve}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': '{{ .CSRFToken }}',
        },
        body: JSON.stringify(payload),
      });

      return resp.text();
    } catch (err) {
      console.error();
    }
  }
</script>

{{ end }}

{{define "body"}}
<main>
  <article>
    <header>
      <hgroup>
        <h1>DeepSquare Proxy</h1>
      </hgroup>
    </header>

    <main>
      {{ template "GenerateRoute" . }}
    </main>

    <footer style="display: none" id="response"></footer>
  </article>
</main>
{{ end }}
